apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/auth-realm: Authentication Required
    ingress.kubernetes.io/auth-secret: internal-services-auth
    ingress.kubernetes.io/auth-type: basic
    kubernetes.io/ingress.allow-http: "false"
  name: ingress-monitoring
spec:
  tls:
  - hosts:
    - elasticsearch.example.com
    secretName: example-tls
  rules:
  - host: elasticsearch.example.com
    http:
      paths:
      - backend:
          serviceName: elasticsearch-logging
          servicePort: 9200
        path: /
---
# This example shows how to serve Kibana or Cerebro under their own location within elasticsearch.example.com
# Since we use "rewrite-target", we have to define separate ingress with the same domain name.
# It will be merged by nginx controller automatically.
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/auth-realm: Authentication Required
    ingress.kubernetes.io/auth-secret: internal-services-auth
    ingress.kubernetes.io/auth-type: basic
    ingress.kubernetes.io/rewrite-target: /
    kubernetes.io/ingress.allow-http: "false"
  name: kibana
spec:
  tls:
  - hosts:
    - elasticsearch.example.com
    secretName: example-tls
  rules:
  - host: elasticsearch.example.com
    http:
      paths:
      - backend:
          serviceName: kibana
          servicePort: 5601
        path: /kibana/
      - backend:
          serviceName: kibana
          servicePort: 5601
        path: /kibana
      - backend:
          serviceName: cerebro
          servicePort: 9000
        path: /cerebro/
      - backend:
          serviceName: cerebro
          servicePort: 9000
        path: /cerebro
      # kopf backward compatibility
      - backend:
          serviceName: cerebro
          servicePort: 9000
        path: /_plugin/kopf
      - backend:
          serviceName: cerebro
          servicePort: 9000
        path: /_plugin/kopf/
